pub const BIT_SIZE: usize = 256;
pub const KEY_BYTES: usize = 32;

pub static EC_P: [u8; 32] = [
    0xFF, 0xFF, 0xFF, 0xFE,
    0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF,
    0x00, 0x00, 0x00, 0x00,
    0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF,
];

pub static EC_A: [u8; 32] = [
    0xFF, 0xFF, 0xFF, 0xFE,
    0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF,
    0x00, 0x00, 0x00, 0x00,
    0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFC,
];

pub static EC_B: [u8; 32] = [
    0x28, 0xE9, 0xFA, 0x9E,
    0x9D, 0x9F, 0x5E, 0x34,
    0x4D, 0x5A, 0x9E, 0x4B,
    0xCF, 0x65, 0x09, 0xA7,
    0xF3, 0x97, 0x89, 0xF5,
    0x15, 0xAB, 0x8F, 0x92,
    0xDD, 0xBC, 0xBD, 0x41,
    0x4D, 0x94, 0x0E, 0x93,
];

pub static EC_N: [u8; 32] = [
    0xFF, 0xFF, 0xFF, 0xFE,
    0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF,
    0x72, 0x03, 0xDF, 0x6B,
    0x21, 0xC6, 0x05, 0x2B,
    0x53, 0xBB, 0xF4, 0x09,
    0x39, 0xD5, 0x41, 0x23,
];

pub static EC_GX: [u8; 32] = [
    0x32, 0xC4, 0xAE, 0x2C,
    0x1F, 0x19, 0x81, 0x19,
    0x5F, 0x99, 0x04, 0x46,
    0x6A, 0x39, 0xC9, 0x94,
    0x8F, 0xE3, 0x0B, 0xBF,
    0xF2, 0x66, 0x0B, 0xE1,
    0x71, 0x5A, 0x45, 0x89,
    0x33, 0x4C, 0x74, 0xC7,
];

pub static EC_GY: [u8; 32] = [
    0xBC, 0x37, 0x36, 0xA2,
    0xF4, 0xF6, 0x77, 0x9C,
    0x59, 0xBD, 0xCE, 0xE3,
    0x6B, 0x69, 0x21, 0x53,
    0xD0, 0xA9, 0x87, 0x7C,
    0xC6, 0x2A, 0x47, 0x40,
    0x02, 0xDF, 0x32, 0xE5,
    0x21, 0x39, 0xF0, 0xA0,
];


#[cfg(test)]
mod tests {
    use num_bigint::BigUint;
    use num_traits::Num;
    use crate::sm2::p256::{EC_A, EC_B, EC_GX, EC_GY, EC_N, EC_P};

    #[test]
    fn params() {
        let p = BigUint::from_str_radix("FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF", 16).unwrap();
        assert_eq!(p, BigUint::from_bytes_be(&EC_P));
        let a = BigUint::from_str_radix("FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC", 16).unwrap();
        assert_eq!(a, BigUint::from_bytes_be(&EC_A));
        let b = BigUint::from_str_radix("28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93", 16).unwrap();
        assert_eq!(b, BigUint::from_bytes_be(&EC_B));
        let n = BigUint::from_str_radix("FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123", 16).unwrap();
        assert_eq!(n, BigUint::from_bytes_be(&EC_N));
        let gx = BigUint::from_str_radix("32C4AE2C1F1981195F9904466A39C9948FE30BBFF2660BE1715A4589334C74C7", 16).unwrap();
        assert_eq!(gx, BigUint::from_bytes_be(&EC_GX));
        let gy = BigUint::from_str_radix("BC3736A2F4F6779C59BDCEE36B692153D0A9877CC62A474002DF32E52139F0A0", 16).unwrap();
        assert_eq!(gy, BigUint::from_bytes_be(&EC_GY));
    }
}

